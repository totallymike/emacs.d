#+TITLE: Michael Westbom's Emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration
<<babel-init>>

** Package management
*** Sources
Let's begin by setting up the package system.  First we'll disable it,
then make sure melpa, the de-facto package repo, is enabled.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (package-refresh-contents))

  (package-initialize)
#+end_src

*** use-package
Now we'll enable John Wiegley's phenomenal [[https://github.com/jwiegley/use-package][use-package]] library:

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

** General configuration
*** Customize
    Going to move away from customize eventually, but
    until then, let's use the customizations I've got:

    #+begin_src emacs-lisp
      (setq custom-file
            (expand-file-name "customizations.el" user-emacs-directory))
      (load custom-file)
    #+end_src
*** No blinking.
    Seriously.
    #+begin_src emacs-lisp
    (blink-cursor-mode 0)
    #+end_src
*** Help and discoverability.

Let's enable guide-key.  This tells you what possible bindings
are available based on what you've already pressed.

#+Begin_src emacs-lisp
  (use-package guide-key-tip
    :ensure t
    :init
    (progn
      (setq guide-key/guide-key-sequence `("C-x"
                                           "C-c"
                                           "C-h")
            guide-key/recursive-key-sequence-flag t
            guide-key/text-scale-amount 0
            guide-key-tip/enabled nil)
      (guide-key-mode 1)))
#+end_src

*** Line numbers
**** Modeline
    #+begin_src emacs-lisp
    ;; Add line/column numbers to modeline
    (line-number-mode t)
    (column-number-mode t)
    #+end_src

**** Selectively enable linum-mode
     =linum-mode= enables gutter line numbers. Disable it for specific modes.

     From [[http://emacswiki.org/emacs/linum-off.el][emacswiki]]
     #+begin_src emacs-lisp
       (require 'linum)

       (defcustom linum-disabled-modes-list '(eshell-mode
                                              wl-summary-mode
                                              compilation-mode
                                              org-mode
                                              text-mode
                                              dired-mode
                                              doc-view-mode
                                              image-mode)
         "* List of modes disabled when global linum mode is on"
         :type '(repeat (sexp :tag "Major mode"))
         :tag " Major modes where linum is disabled"
         :group 'linum)

       (defcustom linum-disable-starred-buffers 't
         "* Disable buffers that have stars in them like *Gnu Emacs*"
         :type 'boolean
         :group 'linum)

       (defun linum-on ()
         "* When linum is running globally, disable line numbers in modes
       defined in `linum-disabled-modes-list'. Changed by linum-off.
       Also turns off numbering in starred modes like *scratch*."
         (unless (or (minibufferp)
                     (member major-mode linum-disabled-modes-list)
                     (string-match "*" (buffer-name))
                     (> (buffer-size) 3000000)) ;; Don't number huge files
           (linum-mode 1)))
       (provide 'linum-off)
     #+end_src

*** Change "yes or no" to "y or n"
    y is just fine, thank you.

    #+begin_src emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    #+end_src
*** Color scheme

    Zenburn. Set it.  If it's not there, download it.

#+begin_src emacs-lisp
  (defun mcw/load-theme ()
    (if (package-installed-p 'zenburn-theme)
        (load-theme 'zenburn)
      (progn
        (package-install 'zenburn-theme)
        (mcw/load-theme))))

  (mcw/load-theme)
#+end_src

*** Helm
    Helm is, in my opinion, the best minibuffer completion thing.
    Let's stick it just about everywhere.

    Also replace the standard =M-x= with =helm-M-x=

    #+begin_src emacs-lisp
    (use-package helm
    :ensure t
    :init
    (progn
      (require 'helm-config)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
      (helm-mode)))
    #+end_src

**** Disable ido-mode
    Don't need ido-mode.  Disable it.

    #+begin_src emacs-lisp
    (ido-mode -1)
    #+end_src

**** helm-descbinds
    helm-descbinds is pretty great.  =C-h b= brings up a helm-powered
    list of available bindings in the current mode.
    #+begin_src emacs-lisp
    (use-package helm-descbinds
    :ensure helm-descbinds
    :config
      (helm-descbinds-mode))
    #+end_src
*** Backups

Turn on a whole mess of backup/save stuff. I'll probably cut
this out eventually.

#+begin_src emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist '(("." . "~/.emacs.d/saves"))
   delete-old-versions nil
   version-control t)

  (let
      ((autosave-dir (expand-file-name "autosave" user-emacs-directory)))
    (unless (file-exists-p autosave-dir)
      (make-directory autosave-dir))
    (setq auto-save-list-file-prefix (concat autosave-dir "/")
          auto-save-file-name-transforms `((".*" ,autosave-dir t))))

  (setq gc-cons-threshold 200000000)
#+end_src

*** Modeline
    The default modeline can get unwieldy, and go wider than the frame.

    Add Bruce Connor's [[https://github.com/Bruce-Connor/smart-mode-line][smart-mode-line]] to make for a prettier and more
    manageable modeline

    #+begin_src emacs-lisp
      (use-package smart-mode-line
        :ensure smart-mode-line
        :pre-init
        :init
        (progn
          (use-package smart-mode-line-powerline-theme
            :ensure smart-mode-line-powerline-theme))
        :config
        (progn
          (sml/setup)))
    #+end_src

*** Undo Tree
    Undo tree is fabulous
    #+begin_src emacs-lisp
      (use-package undo-tree
        :ensure undo-tree
        :diminish undo-tree-mode
        :init
        (progn
          (global-undo-tree-mode)))
    #+end_src
*** Window management
**** Window splitting
     Stole these from
     [[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-28][Sacha Chua]]
    #+begin_src emacs-lisp
      (defun vsplit-last-buffer ()
        (interactive)
        (split-window-vertically)
        (other-window 1 nil)
        (switch-to-next-buffer))

      (defun hsplit-last-buffer ()
        (interactive)
        (split-window-horizontally)
        (other-window 1 nil)
        (switch-to-next-buffer))

      (global-set-key (kbd "C-x 2") 'vsplit-last-buffer)
      (global-set-key (kbd "C-x 3") 'hsplit-last-buffer)
    #+end_src

**** Winner mode
     Winner mode adds an undo history to window configurations.
     #+begin_src emacs-lisp
       (use-package winner
         :ensure winner
         :init (winner-mode 1))
     #+end_src

**** Windmove
     Windmove beats using =C-x o= to toggle through windows

     Let's switch the binding from =Super= to =Meta= though
     #+begin_src emacs-lisp
       (use-package windmove
          :init (progn
                  (windmove-default-keybindings 'meta)))
     #+end_src

*** In which Michael cheats

As a cheat, for the moment we'll just load all the =.el= files I already have.
Later on I'll insert them into this .org file.

#+begin_src emacs-lisp
  (setq mcw-init-dir
        (expand-file-name "init.d" user-emacs-directory))

  (if (file-exists-p mcw-init-dir)
      (dolist (file (directory-files mcw-init-dir t "\\.el$"))
        (load file)))
#+end_src

**
** Programming
